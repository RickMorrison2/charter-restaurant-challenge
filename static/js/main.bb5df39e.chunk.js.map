{"version":3,"sources":["components/SearchBar/SearchBar.module.css","components/RestaurantList/RestaurantList.module.css","components/SearchBar/SearchBar.js","components/Pagination/Pagination.js","components/RestaurantList/RestaurantList.js","components/Table/Table.js","App.js","reportWebVitals.js","index.js","components/Table/Table.module.css","components/Pagination/Pagination.module.css"],"names":["module","exports","SearchBar","onSearchSubmit","useState","searchString","setSearchString","className","Classes","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","Pagination","totalRecords","pageLimit","pageNeighbors","onPageChanged","currentPage","Math","max","min","totalPages","ceil","LEFT_PAGE","RIGHT_PAGE","range","from","to","step","i","push","pages","totalNumbers","startPage","endPage","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","fetchPageNumbers","goToPage","page","scopedPage","handleClick","handleMoveLeft","handleMoveRight","map","index","onClick","RestaurantList","restaurants","selectedState","selectedGenre","searchText","currentRestaurants","setCurrentRestaurants","setCurrentPage","setTotalPages","filteredRestaurants","filter","restaurant","state","genre","includes","name","toLowerCase","city","displayRestaurants","slice","Fragment","el","split","join","telephone","id","data","offset","Table","setRestaurants","key","direction","sortConfig","setSortConfig","setSelectedState","setSelectedGenre","genres","setGenres","setSearchText","useEffect","axios","get","headers","Authorization","then","res","sortedData","sort","a","b","useMemo","updatedGenres","splitGenres","j","sortedRestaurants","reqSort","caret","term","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sIACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,OAAS,4B,mBCA1DD,EAAOC,QAAU,CAAC,UAAY,kCAAkC,WAAa,qC,kLCuB9DC,EArBG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAAqB,EACEC,mBAAS,IADX,mBAC/BC,EAD+B,KACjBC,EADiB,KAEtC,OACI,sBACIC,UAAWC,OACXC,SAAU,SAACC,GACPA,EAAEC,iBACFR,EAAeE,IAJvB,SAOI,uBACIE,UAAWC,SACXI,KAAK,OACLC,YAAY,wBACZC,MAAOT,EACPU,SAAU,SAACL,GAAD,OAAOJ,EAAgBI,EAAEM,OAAOF,a,OCoJ3CG,EAnKI,SAAC,GAMb,IAAD,IALFC,oBAKE,MALa,KAKb,MAJFC,iBAIE,MAJU,GAIV,MAHFC,qBAGE,MAHc,EAGd,EAFFC,EAEE,EAFFA,cACAC,EACE,EADFA,YAEAH,EAAiC,kBAAdA,EAAyBA,EAAY,GACxDD,EAAuC,kBAAjBA,EAA4BA,EAAe,EACjEE,EAC6B,kBAAlBA,EACDG,KAAKC,IAAI,EAAGD,KAAKE,IAAIL,EAAe,IACpC,EACV,IAAMM,EAAaH,KAAKI,KAAKT,EAAeC,GAEtCS,EAAY,OACZC,EAAa,QAEbC,EAAQ,SAACC,EAAMC,GAIjB,IAJmC,IAAdC,EAAa,uDAAN,EACxBC,EAAIH,EACFD,EAAQ,GAEPI,GAAKF,GACRF,EAAMK,KAAKD,GACXA,GAAKD,EAET,OAAOH,GA+CLM,EA5CmB,WACrB,IAAMC,EAA+B,EAAhBjB,EAAoB,EAGzC,GAAIM,EAFgBW,EAAe,EAEL,CAC1B,IAAMC,EAAYf,KAAKC,IAAI,EAAGF,EAAcF,GACtCmB,EAAUhB,KAAKE,IACjBC,EAAa,EACbJ,EAAcF,GAEdgB,EAAQN,EAAMQ,EAAWC,GAEvBC,EAAeF,EAAY,EAC3BG,EAAgBf,EAAaa,EAAU,EACvCG,EAAcL,GAAgBD,EAAMO,OAAS,GAEnD,QAAQ,GACJ,KAAKH,IAAiBC,EAClB,IAAMG,EAAad,EACfQ,EAAYI,EACZJ,EAAY,GAEhBF,EAAK,CAAIR,GAAJ,mBAAkBgB,GAAlB,YAAiCR,IACtC,MAEJ,KAAMI,GAAgBC,EAClB,IAAMG,EAAad,EACfS,EAAU,EACVA,EAAUG,GAEdN,EAAK,sBAAOA,GAAP,YAAiBQ,GAAjB,CAA6Bf,IAClC,MAEJ,KAAKW,GAAgBC,EACrB,QACIL,EAAK,CAAIR,GAAJ,mBAAkBQ,GAAlB,CAAyBP,IAItC,MAAM,CAAE,GAAR,mBAAcO,GAAd,CAAqBV,IAEzB,OAAOI,EAAM,EAAGJ,GAGNmB,GAERC,EAAW,SAACC,GACd,IAAMC,EAAazB,KAAKC,IAAI,EAAGD,KAAKE,IAAIsB,EAAMrB,IAO9CL,EANuB,CACnB2B,aACAtB,aACAP,YACAD,kBAKF+B,EAAc,SAACF,GAAD,OAAU,SAACrC,GAC3BA,EAAEC,iBACFmC,EAASC,KAGPG,EAAiB,SAACxC,GACpBA,EAAEC,iBACFmC,EAASxB,EAA8B,EAAhBF,EAAoB,IAGzC+B,EAAkB,SAACzC,GACrBA,EAAEC,iBACFmC,EAASxB,EAA8B,EAAhBF,EAAoB,IA8D/C,OA1DKF,GAA+B,IAAfQ,EACb,8BACI,oBAAInB,UAAWC,OAAf,SACK4B,EAAMgB,KAAI,SAACL,EAAMM,GACd,OAAIN,IAASnB,EAEL,oBAEI0B,QAASJ,EACT3C,UAAS,UACLe,IAAgByB,EAAhB,UACSvC,UACH,IANd,SASI,+BACI,wCACA,gDAVC6C,GAebN,IAASlB,EAEL,oBAEIyB,QAASH,EACT5C,UAAS,UACLe,IAAgByB,EAAhB,UACSvC,UACH,IANd,SASI,+BACI,wCACA,4CAVC6C,GAgBb,oBAEIC,QAASL,EAAYF,GACrBxC,UAAS,UACLe,IAAgByB,EAAhB,UACSvC,UACH,IANd,SASI,6BAAKuC,KARAM,UA1CO,M,QCF7BE,EAnGQ,SAAC,GAKjB,IAJHC,EAIE,EAJFA,YACAC,EAGE,EAHFA,cACAC,EAEE,EAFFA,cACAC,EACE,EADFA,WACE,EACkDvD,mBAAS,IAD3D,mBACKwD,EADL,KACyBC,EADzB,OAEoCzD,mBAAS,GAF7C,mBAEKkB,EAFL,KAEkBwC,EAFlB,OAGkC1D,mBAAS,GAH3C,mBAGiB2D,GAHjB,WAKIC,EAAsB,YAAIR,GAC3BS,QAAO,SAACC,GACL,MAAsB,QAAlBT,GAGGS,EAAWC,QAAUV,KAE/BQ,QAAO,SAACC,GACL,MAAsB,QAAlBR,GAGGQ,EAAWE,MAAMC,SAASX,MAEpCO,QAAO,SAACC,GACL,MAAmB,KAAfP,IAIAO,EAAWI,KACNC,cACAF,SAASV,EAAWY,gBACzBL,EAAWM,KACND,cACAF,SAASV,EAAWY,gBACzBL,EAAWE,MACNG,cACAF,SAASV,EAAWY,mBAI/BE,EAAqB,YAAIT,GAC1BC,QAAO,SAACC,GACL,OAAkC,IAA9BN,EAAmBjB,QAGhBiB,EAAmBS,SAASH,MAEtCQ,MAAM,EAAG,IAUd,OAAkC,IAA9BD,EAAmB9B,OAEf,cAAC,IAAMgC,SAAP,UACI,6BACI,oBAAIpE,UAAWC,YAAf,uCAOZ,eAAC,IAAMmE,SAAP,WACKF,EAAmBrB,KAAI,SAACwB,GACrB,OACI,qBAAIrE,UAAWC,aAAf,UACI,6BAAKoE,EAAGN,OACR,6BACKM,EAAGJ,KAAKH,SAAS,KACZO,EAAGJ,KAAKK,MAAM,KAAKC,KAAK,MACxBF,EAAGJ,OAEb,6BAAKI,EAAGT,QACR,6BAAKS,EAAGG,YACR,6BACKH,EAAGR,MAAMC,SAAS,KACbO,EAAGR,MAAMS,MAAM,KAAKC,KAAK,MACzBF,EAAGR,UAZuBQ,EAAGI,OAiBnD,cAAC,EAAD,CACI9D,aAAc8C,EAAoBrB,OAClCxB,UAAW,GACXC,cAAe,EACfC,cA3CU,SAAC4D,GAAU,IACrBjC,EAAsCiC,EAAtCjC,WAAYtB,EAA0BuD,EAA1BvD,WAAYP,EAAc8D,EAAd9D,UAC1B+D,GAAUlC,EAAa,GAAK7B,EAClC0C,EAAsBL,EAAYkB,MAAMQ,EAAQA,EAAS/D,IACzD2C,EAAed,GACfe,EAAcrC,IAuCNJ,YAAaA,Q,OC2Jd6D,EAtPD,WAAO,IAAD,EACsB/E,mBAAS,IAD/B,mBACToD,EADS,KACI4B,EADJ,OAEoBhF,mBAAS,CACzCiF,IAAK,OACLC,UAAW,QAJC,mBAETC,EAFS,KAEGC,EAFH,OAM0BpF,mBAAS,OANnC,mBAMTqD,EANS,KAMMgC,EANN,OAO0BrF,mBAAS,OAPnC,mBAOTsD,EAPS,KAOMgC,EAPN,OAQYtF,mBAAS,CAAC,QARtB,mBAQTuF,EARS,KAQDC,EARC,OASoBxF,mBAAS,IAT7B,mBASTuD,EATS,KASGkC,EATH,KAoEhBC,qBAAU,WACNC,IACKC,IAAI,6DAA8D,CAC/DC,QAAS,CACLC,cAAe,0BAGtBC,MAAK,SAACC,GACH,IAAMC,EAAaD,EAAInB,KAAKqB,MAAK,SAACC,EAAGC,GACjC,OAAID,EAAEjC,KAAOkC,EAAElC,MACH,EAERiC,EAAEjC,KAAOkC,EAAElC,KACJ,EAEJ,KAEXc,EAAeiB,QAExB,IAEHI,mBAAQ,WACJ,IAAIC,EAAa,YAAOf,GACxB,IAAK,IAAIzD,KAAKsB,EACV,GAAIA,EAAYtB,GAAGkC,MAAMC,SAAS,KAAM,CACpC,IAAIsC,EAAcnD,EAAYtB,GAAGkC,MAAMS,MAAM,KAC7C,IAAK,IAAI+B,KAAKD,EACLD,EAAcrC,SAASsC,EAAYC,KACpCF,EAAcvE,KAAKwE,EAAYC,SAKlCF,EAAcrC,SAASb,EAAYtB,GAAGkC,QACvCsC,EAAcvE,KAAKqB,EAAYtB,GAAGkC,OAK9CwB,EAAUc,EAAcJ,UACzB,CAAC9C,IAEJiD,mBAAQ,WACJ,IAAMI,EAAoB,YAAIrD,GAAa8C,MAAK,SAACC,EAAGC,GAChD,OAAID,EAAEhB,EAAWF,KAAOmB,EAAEjB,EAAWF,KACD,QAAzBE,EAAWD,WAAuB,EAAI,EAE7CiB,EAAEhB,EAAWF,KAAOmB,EAAEjB,EAAWF,KACD,QAAzBE,EAAWD,UAAsB,GAAK,EAE1C,KAEXF,EAAeyB,KAChB,CAACtB,IAEJ,IAAMuB,EAAU,SAACzB,GACb,IAAIC,EAAY,MAEZC,GACAA,EAAWF,MAAQA,GACM,QAAzBE,EAAWD,YAEXA,EAAY,QAEhBE,EAAc,CAAEH,MAAKC,eAQrByB,EAAQ,GAOZ,OANIxB,EAAWD,WAAsC,QAAzBC,EAAWD,UACnCyB,EAAQ,SACDxB,EAAWD,WAAsC,SAAzBC,EAAWD,YAC1CyB,EAAQ,UAIR,sBAAKxG,UAAWC,YAAhB,UACI,cAAC,EAAD,CACImD,WAAYA,EACZxD,eAhBW,SAAC6G,GACpBnB,EAAcmB,GACdC,QAAQC,IAAI,iBAAkBF,MAgB1B,wBAAOzG,UAAWC,QAAlB,UACI,gCACI,qBAAID,UAAWC,UAAf,UACI,6BACI,yBACID,UAAWC,SACXI,KAAK,SACL0C,QAAS,kBAAMwD,EAAQ,SAH3B,kBAK6B,SAAnBvB,EAAWF,IAAiB0B,EAAQ,UAGlD,6BACI,yBACIxG,UAAWC,SACXI,KAAK,SACL0C,QAAS,kBAAMwD,EAAQ,SAH3B,kBAK6B,SAAnBvB,EAAWF,IAAiB0B,EAAQ,UAGlD,+BACI,yBACIxG,UAAWC,SACXI,KAAK,SACL0C,QAAS,kBAAMwD,EAAQ,UAH3B,kBAKU,IACc,UAAnBvB,EAAWF,IAAkB0B,EAAQ,QAE1C,wBACIxG,UAAWC,SACXK,YAAY,eACZC,MAAO2C,EACP1C,SAAU,SAACL,GAAD,OACN+E,EAAiB/E,EAAEM,OAAOF,QALlC,SA5KT,CACX,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MA8HgCsC,KAAI,SAACe,GAAD,OACR,wBAAoBrD,MAAOqD,EAA3B,SACKA,GADQA,WAMzB,6BACI,yBACI5D,UAAWC,SACXI,KAAK,SACL0C,QAAS,kBAAMwD,EAAQ,cAH3B,yBAKiB,IACO,cAAnBvB,EAAWF,IAAsB0B,EAAQ,UAGlD,+BACI,yBACIxG,UAAWC,SACXI,KAAK,SACL0C,QAAS,kBAAMwD,EAAQ,UAH3B,qBAKa,IACW,UAAnBvB,EAAWF,IAAkB0B,EAAQ,QAE1C,wBACIxG,UAAWC,SACXM,MAAO4C,EACP3C,SAAU,SAACL,GAAD,OACNgF,EAAiBhF,EAAEM,OAAOF,QAJlC,SAOK6E,EAAOvC,KAAI,SAACgB,GAAD,OACR,wBAAoBtD,MAAOsD,EAA3B,SACKA,GADQA,gBAQjC,gCACI,cAAC,EAAD,CACIZ,YAAaA,EACbC,cAAeA,EACfC,cAAeA,EACfC,WAAYA,aCzOrBwD,MARf,WACI,OACI,qBAAK5G,UAAU,MAAf,SACI,cAAC,EAAD,OCMG6G,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K,kBCfApH,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,QAAU,uBAAuB,OAAS,sBAAsB,OAAS,wB,kBCA7JD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,OAAS,8B","file":"static/js/main.bb5df39e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SearchBar_form__1dA7Z\",\"search\":\"SearchBar_search__2KUTD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noneFound\":\"RestaurantList_noneFound__3hh2E\",\"restaurant\":\"RestaurantList_restaurant__4iJjD\"};","import React, { useState } from 'react';\r\nimport * as Classes from './SearchBar.module.css';\r\n\r\nconst SearchBar = ({ onSearchSubmit }) => {\r\n    const [searchString, setSearchString] = useState('');\r\n    return (\r\n        <form\r\n            className={Classes.form}\r\n            onSubmit={(e) => {\r\n                e.preventDefault();\r\n                onSearchSubmit(searchString);\r\n            }}\r\n        >\r\n            <input\r\n                className={Classes.search}\r\n                type=\"text\"\r\n                placeholder=\"Search Restaurants...\"\r\n                value={searchString}\r\n                onChange={(e) => setSearchString(e.target.value)}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport * as Classes from './Pagination.module.css';\r\n\r\nconst Pagination = ({\r\n    totalRecords = null,\r\n    pageLimit = 10,\r\n    pageNeighbors = 0,\r\n    onPageChanged,\r\n    currentPage,\r\n}) => {\r\n    pageLimit = typeof pageLimit === 'number' ? pageLimit : 10;\r\n    totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\r\n    pageNeighbors =\r\n        typeof pageNeighbors === 'number'\r\n            ? Math.max(0, Math.min(pageNeighbors, 2))\r\n            : 0;\r\n    const totalPages = Math.ceil(totalRecords / pageLimit);\r\n\r\n    const LEFT_PAGE = 'LEFT';\r\n    const RIGHT_PAGE = 'RIGHT';\r\n\r\n    const range = (from, to, step = 1) => {\r\n        let i = from;\r\n        const range = [];\r\n\r\n        while (i <= to) {\r\n            range.push(i);\r\n            i += step;\r\n        }\r\n        return range;\r\n    };\r\n\r\n    const fetchPageNumbers = () => {\r\n        const totalNumbers = pageNeighbors * 2 + 3;\r\n        const totalBlocks = totalNumbers + 2;\r\n\r\n        if (totalPages > totalBlocks) {\r\n            const startPage = Math.max(2, currentPage - pageNeighbors);\r\n            const endPage = Math.min(\r\n                totalPages - 1,\r\n                currentPage + pageNeighbors\r\n            );\r\n            let pages = range(startPage, endPage);\r\n\r\n            const hasLeftSpill = startPage > 2;\r\n            const hasRightSpill = totalPages - endPage > 1;\r\n            const spillOffset = totalNumbers - (pages.length + 1);\r\n\r\n            switch (true) {\r\n                case hasLeftSpill && !hasRightSpill: {\r\n                    const extraPages = range(\r\n                        startPage - spillOffset,\r\n                        startPage - 1\r\n                    );\r\n                    pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n                    break;\r\n                }\r\n                case !hasLeftSpill && hasRightSpill: {\r\n                    const extraPages = range(\r\n                        endPage + 1,\r\n                        endPage + spillOffset\r\n                    );\r\n                    pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n                    break;\r\n                }\r\n                case hasLeftSpill && hasRightSpill:\r\n                default: {\r\n                    pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n                    break;\r\n                }\r\n            }\r\n            return [1, ...pages, totalPages];\r\n        }\r\n        return range(1, totalPages);\r\n    };\r\n\r\n    const pages = fetchPageNumbers();\r\n\r\n    const goToPage = (page) => {\r\n        const scopedPage = Math.max(0, Math.min(page, totalPages));\r\n        const paginationData = {\r\n            scopedPage,\r\n            totalPages,\r\n            pageLimit,\r\n            totalRecords,\r\n        };\r\n        onPageChanged(paginationData);\r\n    };\r\n\r\n    const handleClick = (page) => (e) => {\r\n        e.preventDefault();\r\n        goToPage(page);\r\n    };\r\n\r\n    const handleMoveLeft = (e) => {\r\n        e.preventDefault();\r\n        goToPage(currentPage - pageNeighbors * 2 - 1);\r\n    };\r\n\r\n    const handleMoveRight = (e) => {\r\n        e.preventDefault();\r\n        goToPage(currentPage + pageNeighbors * 2 + 1);\r\n    };\r\n\r\n    const pagination =\r\n        !totalRecords || totalPages === 1 ? null : (\r\n            <nav>\r\n                <ul className={Classes.list}>\r\n                    {pages.map((page, index) => {\r\n                        if (page === LEFT_PAGE)\r\n                            return (\r\n                                <li\r\n                                    key={index}\r\n                                    onClick={handleMoveLeft}\r\n                                    className={`${\r\n                                        currentPage === page\r\n                                            ? `${Classes.active}`\r\n                                            : ''\r\n                                    }`}\r\n                                >\r\n                                    <h4>\r\n                                        <span>&laquo;</span>\r\n                                        <span>Previous</span>\r\n                                    </h4>\r\n                                </li>\r\n                            );\r\n\r\n                        if (page === RIGHT_PAGE)\r\n                            return (\r\n                                <li\r\n                                    key={index}\r\n                                    onClick={handleMoveRight}\r\n                                    className={`${\r\n                                        currentPage === page\r\n                                            ? `${Classes.active}`\r\n                                            : ''\r\n                                    }`}\r\n                                >\r\n                                    <h4>\r\n                                        <span>&raquo;</span>\r\n                                        <span>Next</span>\r\n                                    </h4>\r\n                                </li>\r\n                            );\r\n\r\n                        return (\r\n                            <li\r\n                                key={index}\r\n                                onClick={handleClick(page)}\r\n                                className={`${\r\n                                    currentPage === page\r\n                                        ? `${Classes.active}`\r\n                                        : ''\r\n                                }`}\r\n                            >\r\n                                <h4>{page}</h4>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </nav>\r\n        );\r\n\r\n    return pagination;\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport * as Classes from './RestaurantList.module.css';\r\n\r\nconst RestaurantList = ({\r\n    restaurants,\r\n    selectedState,\r\n    selectedGenre,\r\n    searchText,\r\n}) => {\r\n    const [currentRestaurants, setCurrentRestaurants] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(1);\r\n\r\n    const filteredRestaurants = [...restaurants]\r\n        .filter((restaurant) => {\r\n            if (selectedState === 'All') {\r\n                return true;\r\n            }\r\n            return restaurant.state === selectedState;\r\n        })\r\n        .filter((restaurant) => {\r\n            if (selectedGenre === 'All') {\r\n                return true;\r\n            }\r\n            return restaurant.genre.includes(selectedGenre);\r\n        })\r\n        .filter((restaurant) => {\r\n            if (searchText === '') {\r\n                return true;\r\n            }\r\n            return (\r\n                restaurant.name\r\n                    .toLowerCase()\r\n                    .includes(searchText.toLowerCase()) ||\r\n                restaurant.city\r\n                    .toLowerCase()\r\n                    .includes(searchText.toLowerCase()) ||\r\n                restaurant.genre\r\n                    .toLowerCase()\r\n                    .includes(searchText.toLowerCase())\r\n            );\r\n        });\r\n\r\n    const displayRestaurants = [...filteredRestaurants]\r\n        .filter((restaurant) => {\r\n            if (currentRestaurants.length === 0) {\r\n                return true;\r\n            }\r\n            return currentRestaurants.includes(restaurant);\r\n        })\r\n        .slice(0, 10);\r\n\r\n    const onPageChanged = (data) => {\r\n        const { scopedPage, totalPages, pageLimit } = data;\r\n        const offset = (scopedPage - 1) * pageLimit;\r\n        setCurrentRestaurants(restaurants.slice(offset, offset + pageLimit));\r\n        setCurrentPage(scopedPage);\r\n        setTotalPages(totalPages);\r\n    };\r\n\r\n    if (displayRestaurants.length === 0) {\r\n        return (\r\n            <React.Fragment>\r\n                <tr>\r\n                    <td className={Classes.noneFound}>No restaurants found.</td>\r\n                </tr>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {displayRestaurants.map((el) => {\r\n                return (\r\n                    <tr className={Classes.restaurant} key={el.id}>\r\n                        <td>{el.name}</td>\r\n                        <td>\r\n                            {el.city.includes(',')\r\n                                ? el.city.split(',').join(', ')\r\n                                : el.city}\r\n                        </td>\r\n                        <td>{el.state}</td>\r\n                        <td>{el.telephone}</td>\r\n                        <td>\r\n                            {el.genre.includes(',')\r\n                                ? el.genre.split(',').join(', ')\r\n                                : el.genre}\r\n                        </td>\r\n                    </tr>\r\n                );\r\n            })}\r\n            <Pagination\r\n                totalRecords={filteredRestaurants.length}\r\n                pageLimit={10}\r\n                pageNeighbors={0}\r\n                onPageChanged={onPageChanged}\r\n                currentPage={currentPage}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default RestaurantList;\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport RestaurantList from '../RestaurantList/RestaurantList';\r\nimport * as Classes from './Table.module.css';\r\n\r\nconst Table = () => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [sortConfig, setSortConfig] = useState({\r\n        key: 'name',\r\n        direction: 'asc',\r\n    });\r\n    const [selectedState, setSelectedState] = useState('All');\r\n    const [selectedGenre, setSelectedGenre] = useState('All');\r\n    const [genres, setGenres] = useState(['All']);\r\n    const [searchText, setSearchText] = useState('');\r\n\r\n    const states = [\r\n        'All',\r\n        'AL',\r\n        'AK',\r\n        'AS',\r\n        'AZ',\r\n        'AR',\r\n        'CA',\r\n        'CO',\r\n        'CT',\r\n        'DE',\r\n        'DC',\r\n        'FL',\r\n        'GA',\r\n        'HI',\r\n        'ID',\r\n        'IL',\r\n        'IN',\r\n        'IA',\r\n        'KS',\r\n        'KY',\r\n        'LA',\r\n        'ME',\r\n        'MD',\r\n        'MA',\r\n        'MI',\r\n        'MN',\r\n        'MS',\r\n        'MO',\r\n        'MT',\r\n        'NE',\r\n        'NV',\r\n        'NH',\r\n        'NJ',\r\n        'NM',\r\n        'NY',\r\n        'NC',\r\n        'ND',\r\n        'OH',\r\n        'OK',\r\n        'OR',\r\n        'PA',\r\n        'PR',\r\n        'RI',\r\n        'SC',\r\n        'SD',\r\n        'TN',\r\n        'TX',\r\n        'UT',\r\n        'VT',\r\n        'VA',\r\n        'WA',\r\n        'WV',\r\n        'WI',\r\n        'WY',\r\n    ];\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get('https://code-challenge.spectrumtoolbox.com/api/restaurants', {\r\n                headers: {\r\n                    Authorization: 'Api-Key q3MNxtfep8Gt',\r\n                },\r\n            })\r\n            .then((res) => {\r\n                const sortedData = res.data.sort((a, b) => {\r\n                    if (a.name < b.name) {\r\n                        return -1;\r\n                    }\r\n                    if (a.name > b.name) {\r\n                        return 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n                setRestaurants(sortedData);\r\n            });\r\n    }, []);\r\n\r\n    useMemo(() => {\r\n        let updatedGenres = [...genres];\r\n        for (let i in restaurants) {\r\n            if (restaurants[i].genre.includes(',')) {\r\n                let splitGenres = restaurants[i].genre.split(',');\r\n                for (let j in splitGenres) {\r\n                    if (!updatedGenres.includes(splitGenres[j])) {\r\n                        updatedGenres.push(splitGenres[j]);\r\n                        // setGenres([...genres, splitGenres[j]]);\r\n                    }\r\n                }\r\n            } else {\r\n                if (!updatedGenres.includes(restaurants[i].genre)) {\r\n                    updatedGenres.push(restaurants[i].genre);\r\n                    // setGenres([...genres, restaurants[i].genre]);\r\n                }\r\n            }\r\n        }\r\n        setGenres(updatedGenres.sort());\r\n    }, [restaurants]);\r\n\r\n    useMemo(() => {\r\n        const sortedRestaurants = [...restaurants].sort((a, b) => {\r\n            if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                return sortConfig.direction === 'asc' ? -1 : 1;\r\n            }\r\n            if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                return sortConfig.direction === 'asc' ? 1 : -1;\r\n            }\r\n            return 0;\r\n        });\r\n        setRestaurants(sortedRestaurants);\r\n    }, [sortConfig]);\r\n\r\n    const reqSort = (key) => {\r\n        let direction = 'asc';\r\n        if (\r\n            sortConfig &&\r\n            sortConfig.key === key &&\r\n            sortConfig.direction === 'asc'\r\n        ) {\r\n            direction = 'desc';\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    const onSearchSubmit = (term) => {\r\n        setSearchText(term);\r\n        console.log('onSearchSubmit', term);\r\n    };\r\n\r\n    let caret = '';\r\n    if (sortConfig.direction && sortConfig.direction === 'asc') {\r\n        caret = '\\u25B2';\r\n    } else if (sortConfig.direction && sortConfig.direction === 'desc') {\r\n        caret = '\\u25bc';\r\n    }\r\n\r\n    return (\r\n        <div className={Classes.container}>\r\n            <SearchBar\r\n                searchText={searchText}\r\n                onSearchSubmit={onSearchSubmit}\r\n            />\r\n            <table className={Classes.table}>\r\n                <thead>\r\n                    <tr className={Classes.headRow}>\r\n                        <th>\r\n                            <button\r\n                                className={Classes.button}\r\n                                type=\"button\"\r\n                                onClick={() => reqSort('name')}\r\n                            >\r\n                                Name {sortConfig.key === 'name' ? caret : null}\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                className={Classes.button}\r\n                                type=\"button\"\r\n                                onClick={() => reqSort('city')}\r\n                            >\r\n                                City {sortConfig.key === 'city' ? caret : null}\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                className={Classes.button}\r\n                                type=\"button\"\r\n                                onClick={() => reqSort('state')}\r\n                            >\r\n                                State{' '}\r\n                                {sortConfig.key === 'state' ? caret : null}\r\n                            </button>\r\n                            <select\r\n                                className={Classes.select}\r\n                                placeholder=\"Select State\"\r\n                                value={selectedState}\r\n                                onChange={(e) =>\r\n                                    setSelectedState(e.target.value)\r\n                                }\r\n                            >\r\n                                {states.map((state) => (\r\n                                    <option key={state} value={state}>\r\n                                        {state}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                className={Classes.button}\r\n                                type=\"button\"\r\n                                onClick={() => reqSort('telephone')}\r\n                            >\r\n                                Phone Number{' '}\r\n                                {sortConfig.key === 'telephone' ? caret : null}\r\n                            </button>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                className={Classes.button}\r\n                                type=\"button\"\r\n                                onClick={() => reqSort('genre')}\r\n                            >\r\n                                Genre(s){' '}\r\n                                {sortConfig.key === 'genre' ? caret : null}\r\n                            </button>\r\n                            <select\r\n                                className={Classes.select}\r\n                                value={selectedGenre}\r\n                                onChange={(e) =>\r\n                                    setSelectedGenre(e.target.value)\r\n                                }\r\n                            >\r\n                                {genres.map((genre) => (\r\n                                    <option key={genre} value={genre}>\r\n                                        {genre}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <RestaurantList\r\n                        restaurants={restaurants}\r\n                        selectedState={selectedState}\r\n                        selectedGenre={selectedGenre}\r\n                        searchText={searchText}\r\n                    />\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","import './App.css';\nimport Table from './components/Table/Table';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Table />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Table_container__hCJMu\",\"table\":\"Table_table__3dKcE\",\"headRow\":\"Table_headRow__20mfZ\",\"button\":\"Table_button__45Xia\",\"select\":\"Table_select__1s-5X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Pagination_list___yksH\",\"active\":\"Pagination_active__3Fq4D\"};"],"sourceRoot":""}